const axios = require('axios');
const cheerio = require('cheerio');

class CompleteNewsSystemWithEnhancements {
    constructor() {
        this.cache = new Map();
        this.cacheExpiry = 10 * 60 * 1000; // 10분
        this.lastUpdate = null;
        this.isUpdating = false;
        
        // API 모니터링 시스템
        this.apiMetrics = {
            newsApi: { success: 0, failure: 0, totalTime: 0, lastError: null },
            naverApi: { success: 0, failure: 0, totalTime: 0, lastError: null },
            openAi: { success: 0, failure: 0, totalTime: 0, lastError: null },
            skyworkAi: { success: 0, failure: 0, totalTime: 0, lastError: null },
            exchangeApi: { success: 0, failure: 0, totalTime: 0, lastError: null }
        };
        
        // API 설정
        this.apis = {
            newsApi: process.env.NEWS_API_KEY || '44d9347a149b40ad87b3deb8bba95183',
            openAi: process.env.OPENAI_API_KEY,
            skyworkAi: process.env.SKYWORK_API_KEY,
            naverClientId: process.env.NAVER_CLIENT_ID || '4lsPsi_je8UoGGcfTP1w',
            naverClientSecret: process.env.NAVER_CLIENT_SECRET || 'J3BHRgyWPc',
            exchangeApiKey: process.env.EXCHANGE_API_KEY || 'free' // 무료 환율 API 사용
        };

        // Rate Limiting 설정 (대폭 증가)
        this.rateLimits = {
            naver: { requests: 0, resetTime: Date.now() + 60000, maxRequests: 50000 }, // 일일 50,000회
            newsApi: { requests: 0, resetTime: Date.now() + 3600000, maxRequests: 2000 }, // 시간당 2,000회
            openAi: { requests: 0, resetTime: Date.now() + 60000, maxRequests: 100 }, // 분당 100회
            skywork: { requests: 0, resetTime: Date.now() + 60000, maxRequests: 200 }, // 분당 200회
            exchange: { requests: 0, resetTime: Date.now() + 3600000, maxRequests: 1000 } // 시간당 1,000회
        };

        // 뉴스 소스 매핑 (대폭 확장)
        this.sourceMapping = {
            // 글로벌 소스
            'bbc-news': 'BBC News',
            'cnn': 'CNN',
            'reuters': 'Reuters',
            'associated-press': 'AP 통신',
            'the-guardian-uk': 'The Guardian',
            'the-new-york-times': 'New York Times',
            'the-washington-post': 'Washington Post',
            'bloomberg': 'Bloomberg',
            'financial-times': 'Financial Times',
            'wall-street-journal': 'Wall Street Journal',
            'usa-today': 'USA Today',
            'abc-news': 'ABC News',
            'fox-news': 'Fox News',
            'nbc-news': 'NBC News',
            'cbs-news': 'CBS News',
            'time': 'Time Magazine',
            'newsweek': 'Newsweek',
            'the-economist': 'The Economist',
            
            // 한국 소스
            'yonhap-news-agency': '연합뉴스',
            'chosun': '조선일보',
            'joongang': '중앙일보',
            'donga': '동아일보',
            'hankyoreh': '한겨레',
            'khan': '경향신문',
            'hani': '한겨레신문',
            'seoul-shinmun': '서울신문',
            'kookmin-ilbo': '국민일보',
            'munhwa': '문화일보',
            'segye': '세계일보',
            
            // 일본 소스
            'nhk-world': 'NHK World',
            'japan-times': 'Japan Times',
            'asahi-shimbun': '아사히신문',
            'mainichi-shimbun': '마이니치신문',
            'yomiuri-shimbun': '요미우리신문',
            'nikkei': '니혼게이자이신문',
            'kyodo-news': '교도통신',
            'jiji-press': '지지통신'
        };

        // 키워드 분류 (대폭 확장)
        this.keywords = {
            urgent: ['긴급', '속보', '발생', '사고', '재해', '위기', '경보', '비상', '돌발', '응급', 'breaking', 'urgent', 'alert', 'emergency', 'crisis', 'disaster'],
            important: ['중요', '발표', '결정', '승인', '합의', '체결', '발효', '시행', '선언', '공식', 'important', 'significant', 'major', 'key', 'crucial', 'critical'],
            buzz: ['화제', '인기', '트렌드', '바이럴', '논란', '관심', '주목', '이슈', '센세이션', 'viral', 'trending', 'popular', 'buzz', 'sensation', 'hot'],
            
            // 지역별 키워드 (확장)
            korea: ['한국', '서울', '부산', '대구', '인천', '광주', '대전', '울산', '세종', '경기', '강원', '충북', '충남', '전북', '전남', '경북', '경남', '제주', 'korea', 'seoul', 'korean', '손흥민', '이강인', 'bts', '블랙핑크'],
            japan: ['일본', '도쿄', '오사카', '교토', '요코하마', '나고야', '고베', '후쿠오카', '삿포로', '센다이', '오타니', '쇼헤이', '다르비시', 'japan', 'tokyo', 'japanese', 'ohtani', 'shohei', 'darvish', 'suzuki', 'maeda'],
            
            // 스포츠 인물 (일본 분류용)
            japanSports: ['오타니', '쇼헤이', '다르비시', '마에다', '스즈키', '다나카', '구로다', 'ohtani', 'shohei', 'darvish', 'maeda', 'suzuki', 'tanaka', 'kuroda', 'baseball', 'mlb', 'npb']
        };

        // 환율 캐시
        this.exchangeRates = {
            USD_KRW: 1340,
            JPY_KRW: 9.2,
            lastUpdate: null
        };

        console.log('🚀 완전 개선된 뉴스 시스템 초기화 완료 - 대량 수집 모드 활성화');
    }

    // Exponential Backoff 재시도 로직 (개선)
    async retryWithBackoff(apiCall, apiName, maxRetries = 5) {
        const startTime = Date.now();
        
        for (let attempt = 1; attempt <= maxRetries; attempt++) {
            try {
                console.log(`📡 ${apiName} API 호출 시도 ${attempt}/${maxRetries}`);
                
                const result = await apiCall();
                
                // 성공 메트릭 업데이트
                const duration = Date.now() - startTime;
                this.updateApiMetrics(apiName, true, duration);
                
                console.log(`✅ ${apiName} API 호출 성공 (${duration}ms)`);
                return result;
                
            } catch (error) {
                const duration = Date.now() - startTime;
                console.error(`❌ ${apiName} API 호출 실패 (시도 ${attempt}/${maxRetries}):`, error.message);
                
                // 마지막 시도가 아닌 경우에만 재시도
                if (attempt < maxRetries) {
                    const delay = Math.min(1000 * Math.pow(2, attempt - 1), 15000); // 최대 15초
                    console.log(`⏳ ${delay}ms 후 재시도...`);
                    await this.sleep(delay);
                } else {
                    // 실패 메트릭 업데이트
                    this.updateApiMetrics(apiName, false, duration, error.message);
                    throw error;
                }
            }
        }
    }

    // API 메트릭 업데이트
    updateApiMetrics(apiName, success, duration, errorMessage = null) {
        const metric = this.apiMetrics[apiName];
        if (!metric) return;

        if (success) {
            metric.success++;
        } else {
            metric.failure++;
            metric.lastError = errorMessage;
        }
        
        metric.totalTime += duration;
        
        console.log(`📊 ${apiName} 메트릭: 성공 ${metric.success}, 실패 ${metric.failure}, 평균 응답시간 ${Math.round(metric.totalTime / (metric.success + metric.failure))}ms`);
    }

    // Rate Limit 확인
    checkRateLimit(apiName) {
        const limit = this.rateLimits[apiName];
        if (!limit) return true;

        const now = Date.now();
        if (now > limit.resetTime) {
            limit.requests = 0;
            const resetInterval = apiName === 'naver' ? 86400000 : apiName === 'newsApi' ? 3600000 : 60000;
            limit.resetTime = now + resetInterval;
        }

        if (limit.requests >= limit.maxRequests) {
            console.warn(`⚠️ ${apiName} API Rate Limit 도달: ${limit.requests}/${limit.maxRequests}`);
            return false;
        }

        limit.requests++;
        return true;
    }

    // 강제 캐시 무효화 지원
    async getNews(forceRefresh = false, timestamp = null) {
        const cacheKey = 'news_data';
        
        if (forceRefresh || timestamp || !this.cache.has(cacheKey) || this.isCacheExpired(cacheKey)) {
            console.log('🔄 대량 뉴스 데이터 새로 수집 중...', forceRefresh ? '(강제 새로고침)' : '');
            
            if (this.isUpdating && !forceRefresh) {
                console.log('⚠️ 이미 업데이트 중입니다.');
                return this.cache.get(cacheKey)?.data || this.getDefaultNews();
            }

            this.isUpdating = true;
            
            try {
                const newsData = await this.collectAllNews();
                
                this.cache.set(cacheKey, {
                    data: newsData,
                    timestamp: Date.now()
                });
                
                this.lastUpdate = new Date().toISOString();
                console.log('✅ 대량 뉴스 데이터 수집 완료');
                
                return newsData;
            } catch (error) {
                console.error('❌ 뉴스 수집 실패:', error);
                return this.cache.get(cacheKey)?.data || this.getDefaultNews();
            } finally {
                this.isUpdating = false;
            }
        }

        return this.cache.get(cacheKey).data;
    }

    // 캐시 만료 확인
    isCacheExpired(key) {
        const cached = this.cache.get(key);
        if (!cached) return true;
        return Date.now() - cached.timestamp > this.cacheExpiry;
    }

    // 모든 뉴스 수집 (대량 수집 모드)
    async collectAllNews() {
        console.log('📡 대량 뉴스 수집 시작 - 각 섹션 20-30개 목표');
        
        // 실시간 환율 업데이트
        await this.updateExchangeRates();
        
        // 병렬 처리하되 각각 독립적으로 실패 처리
        const results = await Promise.allSettled([
            this.fetchWorldNewsLarge(),
            this.fetchKoreaNewsLarge(),
            this.fetchJapanNewsLarge()
        ]);

        const worldNews = results[0].status === 'fulfilled' ? results[0].value : [];
        const koreaNews = results[1].status === 'fulfilled' ? results[1].value : [];
        const japanNews = results[2].status === 'fulfilled' ? results[2].value : [];

        // 실패한 섹션 로깅
        results.forEach((result, index) => {
            const sections = ['세계뉴스', '한국뉴스', '일본뉴스'];
            if (result.status === 'rejected') {
                console.error(`❌ ${sections[index]} 대량 수집 실패:`, result.reason.message);
            }
        });
        
        // 트렌딩 키워드 생성
        const trending = await this.generateTrendingKeywords([...worldNews, ...koreaNews, ...japanNews]);

        const result = {
            sections: {
                world: worldNews.slice(0, 30), // 최대 30개
                korea: koreaNews.slice(0, 30),
                japan: japanNews.slice(0, 30)
            },
            trending,
            exchangeRates: this.exchangeRates,
            systemStatus: {
                version: '10.0.0-complete-enhanced',
                lastUpdate: this.lastUpdate,
                cacheSize: this.cache.size,
                features: ['large-scale-collection', 'real-time-exchange', 'enhanced-translation', 'source-verification', 'detailed-content'],
                apiMetrics: this.getApiMetricsReport(),
                apiSources: {
                    newsApi: !!this.apis.newsApi,
                    naverApi: !!(this.apis.naverClientId && this.apis.naverClientSecret),
                    openAi: !!this.apis.openAi,
                    skyworkAi: !!this.apis.skyworkAi,
                    exchangeApi: true
                }
            }
        };

        console.log('📊 대량 수집 완료:', {
            world: result.sections.world.length,
            korea: result.sections.korea.length,
            japan: result.sections.japan.length,
            trending: result.trending.length,
            exchangeRates: this.exchangeRates
        });

        return result;
    }

    // 실시간 환율 업데이트
    async updateExchangeRates() {
        try {
            if (!this.checkRateLimit('exchange')) {
                console.warn('⚠️ 환율 API Rate Limit 도달');
                return;
            }

            console.log('💱 실시간 환율 업데이트 중...');
            
            // 무료 환율 API 사용 (exchangerate-api.com)
            const response = await this.retryWithBackoff(
                () => axios.get('https://api.exchangerate-api.com/v4/latest/USD', {
                    timeout: 10000
                }),
                'exchangeApi'
            );

            if (response.data && response.data.rates) {
                const krwRate = response.data.rates.KRW;
                const jpyRate = response.data.rates.JPY;
                
                this.exchangeRates = {
                    USD_KRW: Math.round(krwRate),
                    JPY_KRW: Math.round((krwRate / jpyRate) * 10) / 10,
                    lastUpdate: new Date().toISOString()
                };
                
                console.log('✅ 환율 업데이트 완료:', this.exchangeRates);
            }
        } catch (error) {
            console.error('❌ 환율 업데이트 실패:', error.message);
            // 기본값 유지
        }
    }

    // 세계 뉴스 대량 수집 (20-30개)
    async fetchWorldNewsLarge() {
        const sources = [
            { endpoint: 'top-headlines', params: { category: 'general', language: 'en', pageSize: 50 } },
            { endpoint: 'everything', params: { q: 'world OR global OR international', language: 'en', pageSize: 40, sortBy: 'publishedAt' } },
            { endpoint: 'top-headlines', params: { category: 'business', language: 'en', pageSize: 30 } },
            { endpoint: 'top-headlines', params: { category: 'technology', language: 'en', pageSize: 30 } },
            { endpoint: 'top-headlines', params: { category: 'science', language: 'en', pageSize: 20 } },
            { endpoint: 'everything', params: { q: 'politics OR government', language: 'en', pageSize: 25, sortBy: 'publishedAt' } },
            { endpoint: 'everything', params: { q: 'economy OR finance', language: 'en', pageSize: 25, sortBy: 'publishedAt' } }
        ];

        let allArticles = [];
        
        for (const source of sources) {
            try {
                if (!this.checkRateLimit('newsApi')) {
                    console.warn('⚠️ NewsAPI Rate Limit 도달, 건너뛰기');
                    continue;
                }

                const articles = await this.retryWithBackoff(
                    () => this.fetchFromNewsAPI(source.endpoint, source.params),
                    'newsApi'
                );
                allArticles = allArticles.concat(articles);
                
                // API 호출 간격
                await this.sleep(200);
            } catch (error) {
                console.error(`❌ 세계뉴스 대량 수집 실패 (${source.endpoint}):`, error.message);
            }
        }

        const uniqueArticles = this.removeDuplicates(allArticles);
        const recentArticles = this.filterRecentNews(uniqueArticles);
        const processedArticles = await this.processArticlesForMobileEnhanced(recentArticles, 'world');

        console.log(`📈 세계뉴스 대량 수집 결과: ${processedArticles.length}개`);
        return processedArticles.slice(0, 25);
    }

    // 한국 뉴스 대량 수집 (20-30개)
    async fetchKoreaNewsLarge() {
        let allArticles = [];

        // Naver API에서 대량 수집
        try {
            if (this.checkRateLimit('naver')) {
                const naverArticles = await this.retryWithBackoff(
                    () => this.fetchFromNaverAPILarge(),
                    'naverApi'
                );
                allArticles = allArticles.concat(naverArticles);
            } else {
                console.warn('⚠️ Naver API Rate Limit 도달, 건너뛰기');
            }
        } catch (error) {
            console.error('❌ Naver API 대량 수집 실패:', error.message);
        }

        // NewsAPI에서 한국 관련 뉴스 대량 수집
        const newsApiSources = [
            { endpoint: 'everything', params: { q: 'Korea OR Korean OR Seoul', language: 'en', pageSize: 30, sortBy: 'publishedAt' } },
            { endpoint: 'everything', params: { q: 'South Korea OR K-pop OR Samsung', language: 'en', pageSize: 20, sortBy: 'publishedAt' } },
            { endpoint: 'everything', params: { q: '한국 OR 서울 OR 삼성', pageSize: 15, sortBy: 'publishedAt' } }
        ];

        for (const source of newsApiSources) {
            try {
                if (!this.checkRateLimit('newsApi')) continue;

                const articles = await this.retryWithBackoff(
                    () => this.fetchFromNewsAPI(source.endpoint, source.params),
                    'newsApi'
                );
                
                const koreanArticles = articles.filter(article => 
                    this.containsKeywords(article.title + ' ' + article.description, this.keywords.korea)
                );
                allArticles = allArticles.concat(koreanArticles);
                
                await this.sleep(200);
            } catch (error) {
                console.error(`❌ 한국뉴스 NewsAPI 대량 수집 실패:`, error.message);
            }
        }

        const uniqueArticles = this.removeDuplicates(allArticles);
        const recentArticles = this.filterRecentNews(uniqueArticles);
        const processedArticles = await this.processArticlesForMobileEnhanced(recentArticles, 'korea');

        console.log(`📈 한국뉴스 대량 수집 결과: ${processedArticles.length}개`);
        return processedArticles.slice(0, 25);
    }

    // 일본 뉴스 대량 수집 (20-30개)
    async fetchJapanNewsLarge() {
        const sources = [
            { 
                endpoint: 'everything', 
                params: { 
                    q: 'Japan OR Japanese OR Tokyo OR Ohtani OR Shohei', 
                    language: 'en', 
                    pageSize: 40, 
                    sortBy: 'publishedAt',
                    from: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]
                } 
            },
            { 
                endpoint: 'top-headlines', 
                params: { 
                    country: 'jp', 
                    pageSize: 30 
                } 
            },
            { 
                endpoint: 'everything', 
                params: { 
                    q: 'MLB AND (Ohtani OR Shohei OR Darvish)', 
                    language: 'en', 
                    pageSize: 25, 
                    sortBy: 'publishedAt',
                    from: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]
                } 
            },
            { 
                endpoint: 'everything', 
                params: { 
                    q: 'Nintendo OR Sony OR Toyota OR Honda', 
                    language: 'en', 
                    pageSize: 20, 
                    sortBy: 'publishedAt'
                } 
            },
            { 
                endpoint: 'everything', 
                params: { 
                    q: '일본 OR 도쿄 OR 오타니 OR 쇼헤이', 
                    pageSize: 15, 
                    sortBy: 'publishedAt'
                } 
            }
        ];

        let allArticles = [];
        
        for (const source of sources) {
            try {
                if (!this.checkRateLimit('newsApi')) continue;

                console.log(`📝 일본뉴스 대량 API 요청:`, {
                    endpoint: source.endpoint,
                    params: source.params
                });

                const articles = await this.retryWithBackoff(
                    () => this.fetchFromNewsAPI(source.endpoint, source.params),
                    'newsApi'
                );
                
                // 일본 관련 키워드로 필터링
                const japanArticles = articles.filter(article => {
                    const content = (article.title + ' ' + article.description).toLowerCase();
                    return this.containsKeywords(content, this.keywords.japan) || 
                           this.containsKeywords(content, this.keywords.japanSports);
                });
                
                console.log(`📊 ${source.endpoint}에서 ${japanArticles.length}개 일본 관련 기사 필터링`);
                allArticles = allArticles.concat(japanArticles);
                
                await this.sleep(200);
            } catch (error) {
                console.error(`❌ 일본뉴스 대량 수집 실패 (${source.endpoint}):`, error.message);
                
                if (error.response?.status === 400) {
                    console.error('📋 400 오류 상세:', {
                        status: error.response.status,
                        data: error.response.data,
                        params: source.params
                    });
                }
            }
        }

        const uniqueArticles = this.removeDuplicates(allArticles);
        const recentArticles = this.filterRecentNews(uniqueArticles);
        const processedArticles = await this.processArticlesForMobileEnhanced(recentArticles, 'japan');

        console.log(`📈 일본뉴스 대량 수집 결과: ${processedArticles.length}개`);
        return processedArticles.slice(0, 25);
    }

    // Naver API 대량 수집
    async fetchFromNaverAPILarge() {
        const queries = ['뉴스', '정치', '경제', '사회', '국제', '스포츠', '연예', '과학', '기술', 'IT']; // 쿼리 확장
        let allArticles = [];

        for (const query of queries) {
            try {
                if (!this.checkRateLimit('naver')) {
                    console.warn('⚠️ Naver API Rate Limit 도달, 중단');
                    break;
                }

                const config = {
                    params: {
                        query,
                        display: 20, // 각 쿼리당 20개
                        start: 1,
                        sort: 'date'
                    },
                    headers: {
                        'X-Naver-Client-Id': this.apis.naverClientId,
                        'X-Naver-Client-Secret': this.apis.naverClientSecret,
                        'User-Agent': 'EmarkNews/10.0.0'
                    },
                    timeout: 12000
                };

                console.log(`📡 Naver API 대량 요청: ${query}`);

                const response = await axios.get('https://openapi.naver.com/v1/search/news.json', config);
                
                const articles = (response.data.items || []).map(item => ({
                    id: this.generateId(item.link),
                    title: this.cleanNaverText(item.title),
                    description: this.cleanNaverText(item.description),
                    url: item.link,
                    originalUrl: item.originallink || item.link,
                    image: null,
                    publishedAt: item.pubDate,
                    source: {
                        name: 'Naver News',
                        display: this.getSourceDisplay('Naver News', item.pubDate)
                    }
                }));

                console.log(`✅ Naver API ${query}에서 ${articles.length}개 기사 수집`);
                allArticles = allArticles.concat(articles);
                
                // API 호출 간격 (Rate Limit 방지)
                await this.sleep(150);
                
            } catch (error) {
                console.error(`❌ Naver API 쿼리 실패 (${query}):`, error.message);
                
                if (error.response?.status === 429) {
                    console.error('📋 429 오류 상세:', {
                        status: error.response.status,
                        headers: error.response.headers,
                        data: error.response.data
                    });
                    
                    this.rateLimits.naver.requests = this.rateLimits.naver.maxRequests;
                    break;
                }
            }
        }

        return allArticles;
    }

    // NewsAPI 호출 (개선된 오류 처리)
    async fetchFromNewsAPI(endpoint, params) {
        const baseUrl = 'https://newsapi.org/v2';
        const url = `${baseUrl}/${endpoint}`;
        
        // 파라미터 검증
        const validatedParams = this.validateNewsAPIParams(params);
        
        const config = {
            params: {
                ...validatedParams,
                apiKey: this.apis.newsApi
            },
            timeout: 20000, // 타임아웃 증가
            headers: {
                'User-Agent': 'EmarkNews/10.0.0',
                'Connection': 'close'
            }
        };

        console.log(`📡 NewsAPI 요청: ${endpoint}`, validatedParams);

        const response = await axios.get(url, config);
        
        if (response.data.status !== 'ok') {
            throw new Error(`NewsAPI 오류: ${response.data.message}`);
        }

        const articles = (response.data.articles || [])
            .filter(article => 
                article.title && 
                article.title !== '[Removed]' && 
                article.description && 
                article.description !== '[Removed]' &&
                article.url &&
                !article.url.includes('removed.com') &&
                !article.url.includes('example.com')
            )
            .map(article => ({
                id: this.generateId(article.url),
                title: article.title,
                description: article.description,
                url: article.url,
                originalUrl: article.url, // 원문 링크 보존
                image: article.urlToImage,
                publishedAt: article.publishedAt,
                source: {
                    name: article.source.name,
                    display: this.getSourceDisplay(article.source.name, article.publishedAt)
                }
            }));

        console.log(`✅ NewsAPI ${endpoint}에서 ${articles.length}개 기사 수집`);
        return articles;
    }

    // NewsAPI 파라미터 검증
    validateNewsAPIParams(params) {
        const validated = { ...params };
        
        // pageSize 제한
        if (validated.pageSize > 100) validated.pageSize = 100;
        
        // 날짜 형식 검증
        if (validated.from && !this.isValidDate(validated.from)) {
            delete validated.from;
        }
        if (validated.to && !this.isValidDate(validated.to)) {
            delete validated.to;
        }
        
        // 쿼리 길이 제한
        if (validated.q && validated.q.length > 500) {
            validated.q = validated.q.substring(0, 500);
        }
        
        return validated;
    }

    // 모바일 최적화 기사 처리 (완전 개선)
    async processArticlesForMobileEnhanced(articles, section) {
        const processed = [];

        for (const article of articles) {
            try {
                // AI 번역 및 요약 (완전 개선된 더보기 기능)
                const translatedContent = await this.translateAndSummarizeEnhanced(article, section);
                
                // 마크 분석
                const marks = this.analyzeMarks(article.title + ' ' + article.description);
                
                // 품질 점수 계산
                const stars = this.calculateQualityScore(article, marks);
                
                // 카테고리 분류
                const category = this.classifyCategory(article.title + ' ' + article.description);
                
                // 키워드 추출
                const keywords = this.extractKeywords(article.title + ' ' + article.description);

                // 출처 검증
                const sourceVerification = this.verifySource(article);

                processed.push({
                    ...article,
                    summary: translatedContent.summary,
                    description: translatedContent.detailed,
                    fullContent: translatedContent.fullContent, // 더보기용 상세 내용
                    marks,
                    stars,
                    category,
                    keywords,
                    sourceVerified: sourceVerification.verified,
                    sourceDisplay: sourceVerification.display
                });
            } catch (error) {
                console.error('❌ 기사 처리 실패:', error.message);
                // 기본 처리
                processed.push({
                    ...article,
                    summary: this.createBasicSummary(article),
                    fullContent: article.description || '상세 내용이 없습니다.',
                    marks: [],
                    stars: 3,
                    category: '일반',
                    keywords: ['뉴스'],
                    sourceVerified: false,
                    sourceDisplay: article.source?.name || '출처없음'
                });
            }
        }

        return processed;
    }

    // 출처 검증
    verifySource(article) {
        const sourceName = article.source?.name || '';
        const url = article.originalUrl || article.url || '';
        
        // 알려진 신뢰할 수 있는 소스 확인
        const trustedSources = Object.keys(this.sourceMapping);
        const isKnownSource = trustedSources.some(source => 
            sourceName.toLowerCase().includes(source) || 
            url.toLowerCase().includes(source)
        );
        
        // URL 유효성 검사
        const hasValidUrl = url && url.startsWith('http') && !url.includes('example.com');
        
        let display = sourceName || '출처없음';
        if (!sourceName || sourceName.trim() === '') {
            display = '출처없음';
        } else if (this.sourceMapping[sourceName.toLowerCase()]) {
            display = this.sourceMapping[sourceName.toLowerCase()];
        }
        
        return {
            verified: isKnownSource && hasValidUrl,
            display: display
        };
    }

    // AI 번역 및 요약 (완전 개선된 더보기 기능)
    async translateAndSummarizeEnhanced(article, section) {
        const content = article.title + '\n' + article.description;
        
        // OpenAI 시도 (완전 개선된 프롬프트)
        try {
            if (this.apis.openAi && this.checkRateLimit('openAi')) {
                const result = await this.retryWithBackoff(
                    () => this.callOpenAIEnhanced(content, article),
                    'openAi'
                );
                return this.parseEnhancedTranslationResult(result);
            }
        } catch (error) {
            console.error('❌ OpenAI 번역 실패:', error.message);
        }

        // Skywork AI 시도 (완전 개선된 프롬프트)
        try {
            if (this.apis.skyworkAi && this.checkRateLimit('skywork')) {
                const result = await this.retryWithBackoff(
                    () => this.callSkyworkAIEnhanced(content, article),
                    'skyworkAi'
                );
                return this.parseEnhancedTranslationResult(result);
            }
        } catch (error) {
            console.error('❌ Skywork AI 번역 실패:', error.message);
        }

        // 기본 처리
        return {
            summary: this.createBasicSummary(article),
            detailed: article.description || '상세 내용이 없습니다.',
            fullContent: this.createEnhancedFullContent(article)
        };
    }

    // OpenAI API 호출 (완전 개선)
    async callOpenAIEnhanced(content, article) {
        const prompt = `다음 뉴스를 한국어로 번역하고 모바일에서 읽기 쉽게 3단계로 요약해주세요:

제목: ${article.title}
내용: ${article.description}
출처: ${article.source?.name || '알 수 없음'}

요구사항:
1. 기본 요약: 3-4개의 핵심 포인트 (각 한 줄)
2. 상세 설명: 2-3문장으로 전체 내용 요약
3. 완전한 내용: 모바일에서 읽기 쉬운 상세한 분석 (5-8문장)

형식:
기본요약:
• 첫 번째 핵심 내용
• 두 번째 핵심 내용
• 세 번째 핵심 내용

상세설명:
전체 내용을 2-3문장으로 요약한 설명

완전내용:
이 뉴스에 대한 상세한 분석과 배경 설명을 5-8문장으로 작성. 
관련 맥락, 영향, 의미 등을 포함하여 독자가 완전히 이해할 수 있도록 설명.

주의사항:
- ** 표시나 굵은 글씨 사용 금지
- 모바일에서 읽기 쉽게 간결하게 작성
- 불필요한 수식어 제거
- 한국어로 자연스럽게 번역`;

        const response = await axios.post('https://api.openai.com/v1/chat/completions', {
            model: 'gpt-3.5-turbo',
            messages: [{ role: 'user', content: prompt }],
            max_tokens: 800, // 토큰 수 증가
            temperature: 0.3
        }, {
            headers: {
                'Authorization': `Bearer ${this.apis.openAi}`,
                'Content-Type': 'application/json'
            },
            timeout: 20000
        });

        return response.data.choices[0].message.content;
    }

    // Skywork AI API 호출 (완전 개선)
    async callSkyworkAIEnhanced(content, article) {
        const prompt = `뉴스를 한국어로 번역하고 3단계 요약:
1. 기본요약: 핵심 포인트 3-4개
2. 상세설명: 전체 요약 2-3문장  
3. 완전내용: 상세 분석 5-8문장

내용: ${content}`;

        const response = await axios.post('https://api.skywork.ai/v1/chat/completions', {
            model: 'skywork-lite',
            messages: [{
                role: 'user',
                content: prompt
            }],
            max_tokens: 600
        }, {
            headers: {
                'Authorization': `Bearer ${this.apis.skyworkAi}`,
                'Content-Type': 'application/json'
            },
            timeout: 15000
        });

        return response.data.choices[0].message.content;
    }

    // 완전 개선된 번역 결과 파싱
    parseEnhancedTranslationResult(result) {
        const lines = result.split('\n').filter(line => line.trim());
        
        let summary = '';
        let detailed = '';
        let fullContent = '';
        let currentSection = '';

        for (const line of lines) {
            const trimmedLine = line.trim();
            
            if (trimmedLine.includes('기본요약:') || trimmedLine.includes('요약:')) {
                currentSection = 'summary';
                continue;
            } else if (trimmedLine.includes('상세설명:') || trimmedLine.includes('상세:')) {
                currentSection = 'detailed';
                continue;
            } else if (trimmedLine.includes('완전내용:') || trimmedLine.includes('완전:')) {
                currentSection = 'fullContent';
                continue;
            }

            if (currentSection === 'summary' && trimmedLine.startsWith('•')) {
                summary += trimmedLine + '\n';
            } else if (currentSection === 'detailed' && trimmedLine) {
                detailed += trimmedLine + ' ';
            } else if (currentSection === 'fullContent' && trimmedLine) {
                fullContent += trimmedLine + ' ';
            }
        }

        return {
            summary: summary.trim() || result.substring(0, 200) + '...',
            detailed: detailed.trim() || result.substring(0, 300) + '...',
            fullContent: fullContent.trim() || result
        };
    }

    // 완전한 상세 내용 생성
    createEnhancedFullContent(article) {
        const title = article.title || '';
        const description = article.description || '';
        const source = article.source?.name || '알 수 없는 출처';
        
        return `${title}

${description}

이 기사는 ${source}에서 보도되었으며, 현재 시점에서 중요한 뉴스로 평가됩니다. 

더 자세한 정보와 최신 업데이트는 원문 링크를 통해 확인하실 수 있습니다.`;
    }

    // API 메트릭 리포트 생성
    getApiMetricsReport() {
        const report = {};
        
        Object.entries(this.apiMetrics).forEach(([apiName, metrics]) => {
            const total = metrics.success + metrics.failure;
            report[apiName] = {
                successRate: total > 0 ? Math.round((metrics.success / total) * 100) : 0,
                totalCalls: total,
                avgResponseTime: total > 0 ? Math.round(metrics.totalTime / total) : 0,
                lastError: metrics.lastError
            };
        });
        
        return report;
    }

    // 유틸리티 함수들
    sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    isValidDate(dateString) {
        const date = new Date(dateString);
        return date instanceof Date && !isNaN(date);
    }

    containsKeywords(text, keywords) {
        const lowerText = text.toLowerCase();
        return keywords.some(keyword => lowerText.includes(keyword.toLowerCase()));
    }

    removeDuplicates(articles) {
        const seen = new Set();
        return articles.filter(article => {
            const key = article.title.substring(0, 50);
            if (seen.has(key)) return false;
            seen.add(key);
            return true;
        });
    }

    filterRecentNews(articles) {
        const twoDaysAgo = new Date(Date.now() - 48 * 60 * 60 * 1000);
        return articles.filter(article => {
            const publishedDate = new Date(article.publishedAt);
            return publishedDate >= twoDaysAgo;
        });
    }

    analyzeMarks(content) {
        const marks = [];
        const lowerContent = content.toLowerCase();
        
        if (this.containsKeywords(lowerContent, this.keywords.urgent)) marks.push('긴급');
        if (this.containsKeywords(lowerContent, this.keywords.important)) marks.push('중요');
        if (this.containsKeywords(lowerContent, this.keywords.buzz)) marks.push('Buzz');
        
        return marks;
    }

    calculateQualityScore(article, marks) {
        let score = 3; // 기본 점수
        
        if (marks.includes('긴급')) score += 1;
        if (marks.includes('중요')) score += 1;
        if (marks.includes('Buzz')) score += 0.5;
        if (article.image) score += 0.5;
        if (article.description && article.description.length > 100) score += 0.5;
        if (article.originalUrl && article.originalUrl !== article.url) score += 0.5;
        
        return Math.min(Math.round(score), 5);
    }

    classifyCategory(content) {
        const lowerContent = content.toLowerCase();
        
        if (this.containsKeywords(lowerContent, ['정치', 'politics', 'government', 'election'])) return '정치';
        if (this.containsKeywords(lowerContent, ['경제', 'economy', 'business', 'finance', 'market'])) return '경제';
        if (this.containsKeywords(lowerContent, ['스포츠', 'sports', 'game', 'match', 'baseball', 'soccer'])) return '스포츠';
        if (this.containsKeywords(lowerContent, ['기술', 'technology', 'tech', 'ai', 'digital', 'software'])) return '기술';
        if (this.containsKeywords(lowerContent, ['과학', 'science', 'research', 'study', 'discovery'])) return '과학';
        if (this.containsKeywords(lowerContent, ['문화', 'culture', 'art', 'entertainment', 'movie', 'music'])) return '문화';
        if (this.containsKeywords(lowerContent, ['건강', 'health', 'medical', 'hospital', 'disease'])) return '건강';
        if (this.containsKeywords(lowerContent, ['환경', 'environment', 'climate', 'green', 'pollution'])) return '환경';
        
        return '일반';
    }

    extractKeywords(content) {
        const words = content.toLowerCase().match(/\b\w{3,}\b/g) || [];
        const keywordCount = new Map();
        
        words.forEach(word => {
            if (!this.isStopWord(word)) {
                keywordCount.set(word, (keywordCount.get(word) || 0) + 1);
            }
        });
        
        return Array.from(keywordCount.entries())
            .sort((a, b) => b[1] - a[1])
            .slice(0, 8) // 키워드 수 증가
            .map(([word]) => word);
    }

    isStopWord(word) {
        const stopWords = ['the', 'and', 'or', 'but', 'in', 'on', 'at', 'to', 'for', 'of', 'with', 'by', 'is', 'are', 'was', 'were', 'be', 'been', 'have', 'has', 'had', 'do', 'does', 'did', 'will', 'would', 'could', 'should', 'may', 'might', 'must', 'can', 'this', 'that', 'these', 'those', 'a', 'an'];
        return stopWords.includes(word.toLowerCase()) || word.length < 3;
    }

    getSourceDisplay(sourceName, publishedAt) {
        const mappedName = this.sourceMapping[sourceName.toLowerCase()] || sourceName;
        const date = new Date(publishedAt);
        const timeString = date.toLocaleString('ko-KR', {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit'
        });
        return `${mappedName} ${timeString}`;
    }

    cleanNaverText(text) {
        return text.replace(/<[^>]*>/g, '').replace(/&[^;]+;/g, '').trim();
    }

    generateId(url) {
        return Buffer.from(url).toString('base64').substring(0, 16);
    }

    createBasicSummary(article) {
        const description = article.description || '';
        const sentences = description.split('.').filter(s => s.trim().length > 10);
        
        if (sentences.length >= 2) {
            return sentences.slice(0, 3).map(s => `• ${s.trim()}`).join('\n');
        }
        
        return `• ${description.substring(0, 100)}...`;
    }

    async generateTrendingKeywords(articles) {
        const keywordCount = new Map();
        
        articles.forEach(article => {
            const content = (article.title + ' ' + article.description).toLowerCase();
            const words = content.match(/\b\w{2,}\b/g) || [];
            
            words.forEach(word => {
                if (word.length > 2 && !this.isStopWord(word)) {
                    keywordCount.set(word, (keywordCount.get(word) || 0) + 1);
                }
            });
        });

        return Array.from(keywordCount.entries())
            .sort((a, b) => b[1] - a[1])
            .slice(0, 15) // 트렌딩 키워드 수 증가
            .map(([keyword, count]) => [keyword, Math.min(count, 100)]);
    }

    // 기본 뉴스 데이터 (대량)
    getDefaultNews() {
        const now = new Date().toISOString();
        
        const createNewsItem = (id, title, summary, category, marks = [], fullContent = null) => ({
            id,
            title,
            summary,
            description: summary,
            fullContent: fullContent || summary + '\n\n이 기사에 대한 더 자세한 정보는 원문을 참조하시기 바랍니다. 현재 시점에서 중요한 뉴스로 평가되며, 관련 분야의 전문가들이 주목하고 있는 사안입니다.',
            url: 'https://www.example.com/news/' + id,
            originalUrl: null,
            image: null,
            publishedAt: now,
            source: { 
                name: 'EmarkNews', 
                display: 'EmarkNews ' + new Date().toLocaleString('ko-KR') 
            },
            category,
            marks,
            stars: 4,
            keywords: ['뉴스', '정보', '실시간'],
            sourceVerified: false,
            sourceDisplay: 'EmarkNews'
        });

        return {
            sections: {
                world: [
                    createNewsItem(
                        'world-1',
                        'NASA 우주비행사 지구 귀환 성공',
                        '• NASA 크루-10 미션 4명 우주비행사가 5개월간의 국제우주정거장 체류를 마치고 안전하게 지구로 귀환했습니다\n• 재진입 과정에서 3,000도 고온을 경험하며 17시간의 여행을 완료했습니다\n• 이번 미션에서는 다양한 과학 실험과 우주정거장 유지보수 작업을 성공적으로 수행했습니다',
                        '과학',
                        ['중요', 'Buzz'],
                        'NASA 크루-10 미션의 성공적인 완료는 국제우주정거장 프로그램의 중요한 이정표입니다. 4명의 우주비행사들은 지난 5개월 동안 무중력 환경에서 다양한 과학 실험을 수행했으며, 특히 의학 연구와 재료 과학 분야에서 중요한 성과를 거두었습니다. 이번 귀환 과정에서 사용된 최신 열 차폐 기술은 향후 화성 탐사 미션에도 활용될 예정입니다.'
                    )
                ],
                korea: [
                    createNewsItem(
                        'korea-1',
                        '손흥민 MLS 데뷔전에서 강렬한 인상',
                        '• 손흥민 선수가 미국 메이저리그 사커 데뷔전에서 1골 1어시스트를 기록하며 화려한 활약을 펼쳤습니다\n• MLS 홈페이지에서 "손흥민의 시대가 시작됐다"고 극찬했습니다\n• 팬들과 언론은 그의 MLS 적응력과 리더십에 대해 높은 기대를 표하고 있습니다',
                        '스포츠',
                        ['긴급', 'Buzz'],
                        '손흥민의 MLS 데뷔는 한국 축구 역사에 새로운 장을 열었습니다. 토트넘에서의 성공적인 커리어를 마치고 새로운 도전을 시작한 손흥민은 첫 경기부터 뛰어난 경기력을 보여주었습니다. 그의 합류로 MLS의 아시아 시장 관심도가 크게 높아질 것으로 예상되며, 한국 선수들의 해외 진출에도 긍정적인 영향을 미칠 것으로 전망됩니다.'
                    )
                ],
                japan: [
                    createNewsItem(
                        'japan-1',
                        '오타니 쇼헤이, 시즌 50홈런 달성',
                        '• 오타니 쇼헤이가 2024시즌 50번째 홈런을 기록하며 역사적인 순간을 만들어냈습니다\n• 이는 일본 선수로는 최초로 MLB에서 50홈런을 달성한 기록입니다\n• 팬들과 언론은 그의 놀라운 성과에 대해 극찬을 아끼지 않고 있습니다',
                        '스포츠',
                        ['중요', 'Buzz'],
                        '오타니 쇼헤이의 50홈런 달성은 일본 야구 역사상 가장 위대한 순간 중 하나로 기록될 것입니다. 투타 겸업이라는 독특한 포지션에서 이런 성과를 거둔 것은 전례가 없는 일입니다. 이번 기록으로 그는 MVP 후보 1순위로 떠올랐으며, 일본 내에서는 국민적 영웅으로 추앙받고 있습니다. 그의 성공은 일본 야구의 위상을 전 세계에 알리는 계기가 되고 있습니다.'
                    )
                ]
            },
            trending: [
                ['NASA', 45], ['손흥민', 42], ['오타니', 40], ['MLS', 35], 
                ['우주탐사', 30], ['스포츠', 28], ['과학', 25], ['기술', 22],
                ['야구', 20], ['축구', 18], ['한국', 15], ['일본', 12]
            ],
            exchangeRates: this.exchangeRates
        };
    }

    // 시스템 상태 확인
    getSystemStatus() {
        return {
            status: 'running',
            version: '10.0.0-complete-enhanced',
            uptime: process.uptime(),
            memory: process.memoryUsage(),
            lastUpdate: this.lastUpdate,
            cacheSize: this.cache.size,
            isUpdating: this.isUpdating,
            features: [
                'large-scale-news-collection',
                'real-time-exchange-rates',
                'enhanced-ai-translation',
                'source-verification',
                'detailed-content-generation',
                'mobile-optimization',
                'exponential-backoff-retry',
                'api-monitoring-system'
            ],
            apiMetrics: this.getApiMetricsReport(),
            rateLimits: this.rateLimits,
            exchangeRates: this.exchangeRates,
            apiSources: {
                newsApi: !!this.apis.newsApi,
                naverApi: !!(this.apis.naverClientId && this.apis.naverClientSecret),
                openAi: !!this.apis.openAi,
                skyworkAi: !!this.apis.skyworkAi,
                exchangeApi: true
            }
        };
    }
}

module.exports = CompleteNewsSystemWithEnhancements;